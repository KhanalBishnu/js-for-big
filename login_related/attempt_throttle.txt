<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;


class LoginController extends Controller

{
    use AuthenticatesUsers, ThrottlesLogins;

    protected $maxAttempts = 5;
    protected $decayMinutes = 3;

    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if ($this->hasTooManyLoginAttempts($request)) {
            $this->fireLockoutEvent($request);
            $this->sendLockoutResponse($request);
        }

        if (Auth::attempt($credentials)) {
            $this->clearLoginAttempts($request);
            $user = Auth::user();
            $token = $user->createToken('API Token')->accessToken;

            return response()->json(['token' => $token]);
        }

        $this->incrementLoginAttempts($request);
        $this->sendFailedLoginResponse($request);
    }

    protected function sendLockoutResponse(Request $request)
    {
        $seconds = $this->limiter()->availableIn(
            $this->throttleKey($request)
        );

        // throw ValidationException::withMessages([
        //     'email' => [trans('auth.throttle', ['seconds' => $seconds])],
        // ])->status(429);
        throw ValidationException::withMessages([
            'error' => ['Too many login attempts. Please try again in '.$seconds.' seconds.'],
        ])->status(429);
    }

    protected function sendFailedLoginResponse(Request $request)
    {
        throw ValidationException::withMessages([
            'email' => [trans('auth.failed')],
        ])->status(401);
    }

}
